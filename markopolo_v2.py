# -*- coding: utf-8 -*-
"""MarkoPolo_V2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0IQada0vHYH_wdXqZdCRXW-JjYVbYTQ
"""

pip install PyPortfolioOpt

pip install yfinance

#Import pandas programmms
import pandas as pd
import numpy as np
from pandas_datareader import data as web
from datetime import datetime
import matplotlib.pyplot as plt
import yfinance as yf
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

plt.style.use('fivethirtyeight')

#Define Assets:
assets = input("Write the asset in your portfolio: ")
assets = assets.split()

#Define weights
weights = input("Write the weights of the assets on your portfolio: ")
weights = weights.split()
weights = np.array(weights, dtype=float)

#Invested money
money = int(input("How much money do you invest?"))

#Start and end day ---- Analysed period
startDate = input("Choose a start date: ")
endDate = input("Choose an end date: ")
today = datetime.today().strftime("%Y - %m - %d")

#End date: today or else
if endDate == "today":
  endDate = today
else:
  stockEndDate = stockEndDate

#Create DF with adj closing prices
df = pd.DataFrame()

for stock in assets:
  df[stock] = web.DataReader(stock, data_source='yahoo', start = startDate, end = endDate)['Adj Close']
  
print('............................................................................................')
print("These are the adjusted closing prices for your stocks: ")
display(df)

#Daily return for the stocks:
returns = df.pct_change()
cumreturns = returns.cumsum()*100

#Plotting graph: Cum return for stocks
for a in cumreturns.columns.values:
  plt.plot(cumreturns[a], label = a)

plt.title("Growth over time")
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Growth', fontsize = 18)
plt.legend(df.columns.values, loc="upper left")
plt.show()

#Create and show the annulazied covar matrix
cov_matrix_annual = returns.cov()*252

#calculate the portfolio variance 
port_var = np.dot(weights.T, np.dot(cov_matrix_annual, weights)) #weights transposed * covar matrix * weights

#Calculate portfolio volatitlity(STDEV)
port_vol= np.sqrt(port_var)

#Annual portfolio return
portfolioSimpleAnnualReturn = np.sum(returns.mean() * weights * 252)  #mean return*weights*working days
portfolioSimpleAnnualReturn = np.sum(returns.mean() * weights * 252)

#Graph: Portfolio sum growth over time
portfolioDailyReturn = cumreturns
portfolioDailyReturn["Portfolio Return"] = (cumreturns*weights).sum(axis=1)
portfolioDailyReturn["Date"] = portfolioDailyReturn.index
portfolioDailyReturn.plot(x="Date", y="Portfolio Return", kind="line")


#Expected annual return, volatility - risk, and variance
print('............................................................................................')
print("These are the values for you current portfolio: ")
percent_var = str( round(port_var,2) * 100)+ '%'
percent_vols = str( round(port_vol,2) *100)+'%'
percent_ret = str( round(portfolioSimpleAnnualReturn,2)*100)+'%'

print("Expected annual return: " + percent_ret)
print("Annual volatility/risk: " + percent_vols)
print("Annual variance: " + percent_var)
print('............................................................................................')


#Portfolio optimization:
#Calcuate the expected return and the annualize sample covariance matrix ond assets returns
mu = expected_returns.mean_historical_return(df)                   #CAPM
s = risk_models.sample_cov(df)                                     #Expected return = RF rate + Beta*Market risk premium
                              
print("These are the values for you optimazed portfolio: ")
#Optimize for max sharpe ratio
ef = EfficientFrontier(mu, s)
weights = ef.max_sharpe()
cleaned_weights = ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose = True)

print('............................................................................................')        #https://pyportfolioopt.readthedocs.io/en/latest/
print('This is how your portfolio should be composed: ')
#Get the discrete allocation of each share per stock
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(df)
weights = cleaned_weights
da = DiscreteAllocation(weights, latest_prices, total_portfolio_value = money)

allocation, leftover = da.lp_portfolio()
print("Dicscreate allocation: ", allocation)
print("Funds remaining: ${:.2f}".format(leftover))


#-------------- SAMPLE TEST --------------------#
# ASSETS:            BCFF11.SA BEEF3.SA EQTL3.SA HGLG11.SA IGTA3.SA KNRI11.SA MRFG3.SA PETR3.SA SAPR4.SA SULA3.SA TAEE3.SA WIZS3.SA
# WEIGHTS :          0.09 0.08 0.05 0.09 0.16 0.1 0.1 0.09 0.07 0.03 0.11 0.3
#Start date:         01-01-2017
#End date:           today