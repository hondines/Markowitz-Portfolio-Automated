# -*- coding: utf-8 -*-
"""MarkoPolo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13DkHBGWytMu9Ii_UNkSHsoZmX9Aee3H4
"""

pip install PyPortfolioOpt

pip install yfinance

#Import pandas programmms
import pandas as pd
import numpy as np
from pandas_datareader import data as web
from datetime import datetime
import matplotlib.pyplot as plt
import yfinance as yf
from pypfopt.efficient_frontier import EfficientFrontier
from pypfopt import risk_models
from pypfopt import expected_returns

plt.style.use('fivethirtyeight')

#Define Assets:

assets = input("Write the asset in your portfolio: ")
assets = assets.split()

weights = input("Write the weights of the assets on your portfolio: ")
weights = weights.split()
weights = np.array(weights, dtype=float)

money = int(input("How much money do you invest?"))

stockStartDate = input("Choose a start date: ")

stockEndDate = input("Choose an end date: ")
today = datetime.today().strftime("%Y - %m - %d")

#End date: today or else
if stockEndDate == "today":
  stockEndDate = today
else:
  stockEndDate = stockEndDate

#Create DF with adj closing prices
df = pd.DataFrame()

for stock in assets:
  df[stock] = web.DataReader(stock, data_source='yahoo', start = stockStartDate, end = stockEndDate)['Adj Close']

#Plotting graph 
title = "Portfolio adj close price hist"
mystocks = df

for c in mystocks.columns.values:
  plt.plot(mystocks[c], label = c)

#Graph
plt.title(title)
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Adj Prcie', fontsize = 18)
plt.legend(mystocks.columns.values, loc="upper left")
plt.show()

#Daily return for the stocks:
returns = df.pct_change()

#Create and show the annulazied covar matrix
cov_matrix_annual = returns.cov()*252

#calculate the portfolio variance 
port_var = np.dot(weights.T, np.dot(cov_matrix_annual, weights)) #weights transposed * covar matrix * weights

#Calculate portfolio volatitlity(STDEV)
port_vol= np.sqrt(port_var)

#Annual portfolio return
portfolioSimpleAnnualReturn = np.sum(returns.mean() * weights * 252)

#Expected annual return, volatility - risk, and variance
print('.........................................')
percent_var = str( round(port_var,2) * 100)+ '%'
percent_vols = str( round(port_vol,2) *100)+'%'
percent_ret = str( round(portfolioSimpleAnnualReturn,2)*100)+'%'

print("Expected annual return: " + percent_ret)
print("Annual volatility/risk: " + percent_vols)
print("Annual variance: " + percent_var)
print('.........................................')

# ITSA4.SA IGTA3.SA BEEF3.SA SAPR4.SA
# 0.25 0.25 0.25 0.25

#Portfolio optimization:
#Calcuate the expected return and the annualise sample covariance matrix ond assets returns
mu = expected_returns.mean_historical_return(df)
s = risk_models.sample_cov(df)

#Optimize for max sharpe ratio
ef = EfficientFrontier(mu, s)
weights = ef.max_sharpe()
cleaned_weights = ef.clean_weights()
print(cleaned_weights)
ef.portfolio_performance(verbose = True)

print('.........................................')

#Get the discrete allocation of each share per stock
from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

latest_prices = get_latest_prices(df)
weights = cleaned_weights
da = DiscreteAllocation(weights, latest_prices, total_portfolio_value = money)

allocation, leftover = da.lp_portfolio()
print("Dicscreate allocation: ", allocation)
print("Funds remaining: ${:.2f}".format(leftover))